from odoo import models, fields, api
from odoo.exceptions import ValidationError


class ReportMenu(models.Model):
    _name = 'menu.accounting.cs'
    _description = 'menu.accounting.cs'

    name = fields.Char(string='Name Of Person')
    sctp_no = fields.Char(string='SCTP Membership')
    contact_person = fields.Char(string='Contact Person')
    designation = fields.Char(string='Designation')
    email_address = fields.Char(string='Email Address')
    mobile = fields.Char(string='Mobile', default='', help="Enter a valid phone number (10-12 digits)")
    Office = fields.Char(string='Office', default='')
    sctp_radio = fields.Selection([('option1', 'Yes'), ('option2', 'No'), ('option3', 'NA')])
    audited_radio = fields.Selection([('option1', 'Audited'), ('option2', 'Unaudited')])
    radio_button_a = fields.Selection([('option1', 'Yes'), ('option2', 'No')])
    radio_button_b = fields.Selection([('option1', 'Yes'), ('option2', 'No')])
    radio_button_c = fields.Selection([('option1', 'Yes'), ('option2', 'No')])
    start_date = fields.Date(string='Start Date')
    end_date = fields.Date(string='End Date')
    due_date = fields.Date(string='Due Date')
    assessment_year =fields.Char(string='Assessment Year', readonly=True, default=lambda self: fields.Date.today().year)
    radio_button_string_the_company = fields.Selection([('option1', 'Yes'), ('option2', 'No')])
    radio_button_particular = fields.Selection([('option1', 'Yes'), ('option2', 'No')])
    date_from = fields.Date(string='Date From')
    date_to = fields.Date(string='Date To')
    nextprofite_loss =fields.Float()
    less =fields.Float()
    not_taxable_income =fields.Float()
    add =fields.Float()
    adjusted_profit_loss_a =fields.Float(readonly=True)
    adjusted_profit_loss_b =fields.Float(readonly=True)
    adjusted_profit_loss_b1 =fields.Float()
    adjusted_profit_loss_b2 =fields.Float()
    less_a =fields.Float()
    less_b =fields.Float()
    futher_deductions_a =fields.Float()
    futher_deductions_b =fields.Float()
    adjusted_profit_a =fields.Float(readonly=True)
    adjusted_profit_b =fields.Float(readonly=True)
    balancing_charge_a =fields.Float()
    balancing_charge_b =fields.Float()
    unutilised_capital_allowance =fields.Float(readonly=True)
    currnet_year_a =fields.Float()
    currnet_year_b =fields.Float()
    unutilised_losses_a = fields.Float()
    unutilised_losses_b = fields.Float()
    gross_rental_income_a = fields.Float()
    gross_rental_income_b = fields.Float()
    less_deductible_expenses_a = fields.Float()
    less_deductible_expenses_b = fields.Float()
    net_rental_income_a =fields.Float()
    net_rental_income_b =fields.Float()
    interest_income_a =fields.Float()
    interest_income_b =fields.Float()
    other_taxable_income_a =fields.Float()
    other_taxable_income_b =fields.Float()
    total_income_losses_a =fields.Float(readonly=True)
    total_income_losses_b =fields.Float(readonly=True)
    less_unulisied_a =fields.Float()
    less_unulisied_b =fields.Float()
    less_current_a =fields.Float()
    less_current_b =fields.Float()
    total_income_a =fields.Float(readonly=True)
    total_income_b =fields.Float(readonly=True)
    unutilised_capital =fields.Float()
    unutilised_losses_carried =fields.Float(readonly=True)
    unutilised_donations_carried =fields.Float()
    revenue =fields.Float()
    gross_profit_loss =fields.Float()
    directors_fees =fields.Float()
    total_remuneration =fields.Float()
    medical_expenses =fields.Float()
    transport_travelling =fields.Float()
    entertainment_expenses =fields.Float()
    inventories =fields.Float()
    trade_receivable =fields.Float()
    principal_activities = fields.Selection([('yes', 'Yes'), ('no', 'No')])
    principal_activities_char =fields.Char()
    the_company_ultimate = fields.Selection([('yes', 'Yes'), ('no', 'No')])
    the_company_ultimate_char =fields.Char()
    unutulisied_capital_a =fields.Float()
    unutulisied_capital_b =fields.Float()
    company_saltisfied_a =fields.Char()
    company_saltisfied_b =fields.Char()
    deduction_for_expenditure_a =fields.Float()
    deduction_for_expenditure_b =fields.Float()
    section_14c_deduction_a =fields.Float()
    section_14c_deduction_b =fields.Float()
    staff_costs_and_consumables_a =fields.Float()
    staff_costs_and_consumables_b =fields.Float()
    company_appropriated = fields.Selection([('yes', 'Yes'), ('no', 'No')])
    company_appropriated_char =fields.Char()
            
    @api.onchange('adjusted_profit_loss_b1')
    def _onchange_adjusted_profit_loss_b1(self):
        if self.adjusted_profit_loss_b1:
            self.adjusted_profit_loss_a = self.adjusted_profit_loss_b1

    @api.onchange('adjusted_profit_loss_b2')
    def _onchange_adjusted_profit_loss_b2(self):
        if self.adjusted_profit_loss_b2:
            self.adjusted_profit_loss_b = self.adjusted_profit_loss_b2