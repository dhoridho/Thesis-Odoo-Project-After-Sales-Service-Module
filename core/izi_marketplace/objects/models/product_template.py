# -*- coding: utf-8 -*-
# Copyright 2021 IZI PT Solusi Usaha Mudah

from odoo import api, fields, models, tools, _
from odoo.exceptions import UserError, ValidationError
import json
from werkzeug.urls import url_quote

SUPPORTED_IMAGE_MIMETYPES = ['image/jpeg', 'image/jpg', 'image/png']


class ProductTemplate(models.Model):
    _inherit = 'product.template'

    def default_marketplace(self):
        is_marketplace = self._context.get('search_default_is_marketplace')
        if is_marketplace:
            return True
        else:
            return False

    map_line_ids = fields.One2many(comodel_name="mp.map.product.line", inverse_name="product_tmpl_id",
                                   string="Mapped Lines", readonly=True)
    generated_by_mapping = fields.Boolean(string="Generated by Mapping?", default=False)
    product_map_ref = fields.Char(string="Product Map Ref.", readonly=True)
    mp_product_ids_ref = fields.Char(string="MP Product IDs Ref.", readonly=True)
    is_marketplace = fields.Boolean(string="is Marketplace", default=default_marketplace)
    is_shopee = fields.Boolean(string="Shopee", default=False)
    is_tokopedia = fields.Boolean(string="Tokopedia", default=False)
    is_lazada = fields.Boolean(string="Lazada", default=False)
    is_blibli = fields.Boolean(string="Blibli", default=False)
    is_tiktok = fields.Boolean(string="Tiktok Shop", default=False)
    mp_variant_raw = fields.Text('Variant Raw')
    has_variant = fields.Boolean(compute='_compute_mp_variant_raw')
    # mp_variant_value_ids = fields.One2many('product.product',
    #                                     'product_tmpl_id', string="Product Template Attribute Value")
    mp_product_image_ids = fields.One2many(comodel_name="product.template.image", inverse_name="product_tmpl_id",
                                           string="Marketplace Product Images")
    mp_product_main_image_url = fields.Char(string="Product Template Main Image URL",
                                            compute="_compute_mp_product_main_image_url", store=True)
    mp_product_wholesale_ids = fields.One2many(comodel_name="mp.product.wholesale", inverse_name="mp_product_id",
                                               string="Marketplace Product Wholesale")
    mp_length = fields.Integer(string='MP Length', default=1)
    mp_width = fields.Integer(string='MP Width', default=1)
    mp_height = fields.Integer(string='MP Height', default=1)
    mp_product_id = fields.Many2one(comodel_name="mp.product", string="Marketplace Product", readonly=True,
                                    ondelete="restrict")
    sp_item_id = fields.Char("SP Register ID")
    tp_item_id = fields.Char("TP Register ID")
    lz_item_id = fields.Char("LZ Register ID")
    tts_item_id = fields.Char('TTS Register ID')
    image = fields.Binary(string="Image", attachment=True,
                          help="This field holds the image used as image for the product, limited to 1024x1024px.")
    mp_attribute_value_ids = fields.One2many('product.attribute.marketplace.value',
                                        'product_tmpl_id', string="Product Template Attribute Value")
    mp_item_ids = fields.One2many('product.template.marketplace',
                                        'product_tmpl_id', string="Product Template Attribute Value")
    sp_item_ids = fields.One2many('product.template.marketplace',
                                        'sp_account_id', string="Product Template Attribute Value")
    tp_item_ids = fields.One2many('product.template.marketplace',
                                        'tp_account_id', string="Product Template Attribute Value")
    tts_item_ids = fields.One2many('product.template.marketplace',
                                        'tts_account_id', string="Product Template Attribute Value")

    @api.model
    def fields_get(self, allfields=None, attributes=None):
        result = super(ProductTemplate, self).fields_get(allfields=allfields, attributes=attributes)
        template_name = 'product_relation_marketplace'
        values = []
        export_obj = self.env['ir.exports']
        export_line_obj = self.env['ir.exports.line']
        export_template = export_obj.search([('name', '=', template_name)], limit=1)
        if not export_template:
            export_template = export_obj.create({
                'name': template_name,
                'resource': 'product.template'
            })
        if 'name' in result:
            values.append({'name': 'name', 'export_id': export_template.id})
        if 'default_code' in result:
            values.append({'name': 'default_code', 'export_id': export_template.id})
        if 'product_variant_ids' in result:
            values.append({'name': 'product_variant_ids', 'export_id': export_template.id})
            values.append({'name': 'product_variant_ids/id', 'export_id': export_template.id})
        export_template_line = export_line_obj.search([('export_id', '=', export_template.id)])
        if not export_template_line:
            export_line_obj.create(values)
        return result

    @api.model
    def create(self, values):
        protemplate = super(ProductTemplate, self).create(values)
        if protemplate.mp_product_image_ids:
            mp_product_image = protemplate.get_main_image()
            protemplate.write({'image': mp_product_image.image})
        return protemplate

    def write(self, values):
        variant_attribute_data = []
        if 'mp_attribute_value_ids' in values and values.get('mp_attribute_value_ids'):
            for record in self:
                for line in values.get('mp_attribute_value_ids'):
                    if line[0] == 2:
                        variant_line = record.mp_attribute_value_ids.filtered(lambda r:r.id == line[1])
                        variant_attribute_data.append({'attribute_value': variant_line.attribute_value_ids.ids})

        res = super(ProductTemplate, self).write(values)
        for protemplate in self:
            if protemplate.mp_product_image_ids:
                mp_product_image = protemplate.get_main_image()
                if mp_product_image.id != self._context.get('latest_mp_product_image_id'):
                    protemplate.with_context({'latest_mp_product_image_id': mp_product_image.id}).write(
                        {'image': mp_product_image.image})
            else:
                if not self._context.get('mp_product_image_id_cleaned'):
                    protemplate.with_context({'mp_product_image_id_cleaned': True}).write({'image': False})

        if 'attribute_line_ids' in values and values.get('attribute_line_ids'):
            for record in self:
                record._onchange_marketplace_attribute_ids()
        if len(variant_attribute_data) > 0:
            for record in self:
                for variant_attribute_line in variant_attribute_data:
                    variant_id = record.product_variant_ids.filtered(lambda r: r.product_template_attribute_value_ids.ids == variant_attribute_line.get('attribute_value'))
                    if not variant_id:
                        continue
                    variant_id.write({'active': False})
        return res

    @api.depends('mp_attribute_value_ids')
    def check_marketplace_ids(self):
        self.hide = False
        for x in self:
            record = self.env['product.product'].search([ ('product_tmpl_id' , '=', x.id)])
            not_active = self.env['product.product'].search([('product_tmpl_id' , '=', x.id),('active' , '=', False)])

            if len(self.mp_attribute_value_ids) >= 1:
                self.hide = True

            if len(record) >= 2:
                self.hide = True

            if len(not_active) > 1:
                self.hide = True

    def _onchange_marketplace_attribute_ids(self):
        for record in self:
            record.mp_attribute_value_ids.unlink()
            data = []
            for variant in record.product_variant_ids:
                data.append((0, 0, {
                    # 'attribute_id': variant.product_template_attribute_value_ids.attribute_id.id,
                    'attribute_value_ids': [(6, 0, variant.product_template_attribute_value_ids.ids)],
                    'product_id': variant.id
                }))
            record.mp_attribute_value_ids = data

    def set_mp_data(self):
        return self.mapped('product_variant_ids').set_mp_data()

    @api.depends('is_marketplace', 'mp_variant_raw')
    def _compute_mp_variant_raw(self):
        for line in self:
            if line.is_marketplace and line.mp_variant_raw:
                variant_raw = json.loads(line.raw, strict=False)
                line.has_variant = True
            else:
                line.has_variant = False

    def action_post_marketplace(self):
        if not self.id:
            raise UserError("The product must be save first.")
        if not self.mp_product_image_ids:
            raise ValidationError('Image not found. Please fill the picture.')

        # if self.is_shopee == True and (not self.sp_item_id or self.sp_item_id == 0):
        if self.is_shopee:
            self.sp_add_product(data=self.with_context(id=self.id))

        # if self.is_tokopedia == True and (not self.tp_item_id or self.tp_item_id == 0):
        #     self.tp_add_product(data=self.with_context(id=self.id))
        if self.is_tokopedia:
            self.tp_add_product(data=self.with_context(id=self.id))
        if self.is_lazada:
            self.lz_add_product(data=self.with_context(id=self.id))

    def sp_add_product(self, **kw):
        self.ensure_one()
        if hasattr(self, '%s_add_product' % 'shopee'):
            return getattr(self, '%s_add_product' % 'shopee')(**kw)

    def tp_add_product(self, **kw):
        self.ensure_one()
        if hasattr(self, '%s_add_product' % ('tokopedia')):
            return getattr(self, '%s_add_product' % ('tokopedia'))(**kw)

    def lz_add_product(self, **kw):
        self.ensure_one()
        if hasattr(self, '%s_add_product' % 'lazada'):
            return getattr(self, '%s_add_product' % 'lazada')(**kw)

    def get_main_image(self):
        self.ensure_one()
        if self.mp_product_image_ids:
            return self.mp_product_image_ids.sorted('sequence')[0]
        return None

    @api.depends('mp_product_image_ids.sequence', 'mp_product_image_ids.name')
    def _compute_mp_product_main_image_url(self):
        for mp_product in self:
            mp_product_main_img = mp_product.get_main_image()
            mp_product.mp_product_main_image_url = mp_product_main_img and mp_product_main_img.name or None

    def action_create_variants_marketplace(self):
        if not self.default_code:
            raise ValidationError('Product code not found. Please fill the product code.')

        context = dict(self.env.context) or {}
        if self.is_marketplace == True:
            context.update({
                'default_is_marketplace': True,
                'default_product_code': self.default_code
            })
        else:
            context.update({
                'default_is_marketplace': False,
                'default_product_code': self.default_code
            })
        return {
            'type': 'ir.actions.act_window',
            'name': 'Create Variants',
            'view_mode': 'form',
            'res_model': 'product.template.variant.marketplace',
            'domain': [],
            'context': context,
            'target': 'new'
        }

    def action_create_images_wizard(self):
        context = dict(self.env.context) or {}
        return {
            'type': 'ir.actions.act_window',
            'name': 'Upload Image',
            'view_mode': 'form',
            'res_model': 'product.template.images.wizard',
            'domain': [],
            'context': context,
            'target': 'new'
        }

    def action_delete_variants_marketplace(self):
        for record in self:
            template_id = record.mp_attribute_value_ids.mapped('product_tmpl_id')
            product_variant_ids = template_id.mapped('product_variant_ids')
            product_variant_ids.write({'active': False})
            record.mp_attribute_value_ids.unlink()

    @api.model
    def cron_check_default_code(self):
        ### check and update default_code when is null
        product_template_obj = self.env['product.template'].search([('default_code', '=', False)])
        if product_template_obj:
            for prod in product_template_obj:
                if not prod.categ_id:
                    raise ValidationError('Product category not found in: %s' % prod.name)
                category = prod.categ_id
                if not category.category_prefix:
                    raise ValidationError('Category prefix not found in: %s' % category.name)
                product_prefix = category.category_prefix
                category_sequence = int(category.current_sequence)
                current_code = category.category_prefix + '-' + str(f"{category_sequence :03d}")

                ## Update default_code
                prod.product_prefix = product_prefix,
                prod.category_sequence = category_sequence,
                prod.default_code = current_code,
                next_sequence = int(category.current_sequence) + 1
                category.current_sequence = str(f"{next_sequence :03d}")


class ProductTemplateImage(models.Model):
    _name = 'product.template.image'
    _description = 'Product Template Image'

    sequence = fields.Integer(string="Sequence", default=1)
    name = fields.Char(string="Image URL", readonly=True)
    image = fields.Binary('Image', attachment=True)
    file_name = fields.Char(string="Filename", readonly=True)
    product_tmpl_id = fields.Many2one('product.template', string="Product Template", ondelete='cascade', index=True)
    mimetype = fields.Char('MimeType')
    image_width = fields.Integer('Width')
    image_height = fields.Integer('Height')

    # @api.model
    # def create(self, values):
    #     res = super(ProductTemplateImage, self).create(values)
    #     attachments = self.env['ir.attachment'].sudo().search([
    #         ('res_model', '=', 'product.template.image'),
    #         ('res_field', '=', 'image'),
    #         ('res_id', '=', res.id)
    #     ])
    #     # Only add a src for supported images
    #     if attachments.mimetype not in SUPPORTED_IMAGE_MIMETYPES:
    #         raise ValidationError(
    #             "Image has wrong image format, please use images with extensions [.jpg, .jpeg, .png]")
    #
    #     try:
    #         image = tools.base64_to_image(values.get('image'))
    #         im_width = image.width
    #         im_height = image.height
    #     except Exception:
    #         im_width = 0
    #         im_height = 0
    #
    #     if im_width < 300 or im_height < 300:
    #         raise ValidationError(
    #             "Image size smaller than recommended size. Minimum image size: 300x300. For better quality using a larger than 700x700")
    #
    #     res.update({
    #         'image_width': im_width,
    #         'image_height': im_height,
    #         'mimetype': attachments.mimetype
    #     })
    #     return res


class ProductTemplateMarketplace(models.Model):
    _name = 'product.template.marketplace'
    _description = 'Product Template Marketplace'

    name = fields.Char(string="Item ID", readonly=True)
    product_tmpl_id = fields.Many2one('product.template', string="Product Template", ondelete='cascade', index=True)
    sp_account_id = fields.Many2one('mp.account', string="Marketplace Account", ondelete='cascade', index=True)
    tp_account_id = fields.Many2one('mp.account', string="Marketplace Account", ondelete='cascade', index=True)
    tts_account_id = fields.Many2one('mp.account', string="Marketplace Account", ondelete='cascade', index=True)
