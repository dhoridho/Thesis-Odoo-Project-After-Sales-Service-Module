from odoo import models, fields, api


class ResConfigSettings(models.TransientModel):
	_inherit = 'res.config.settings'

	@api.model
	def _default_is_manufacturing_plan(self):
		return self.env.user.has_group('equip3_manuf_accessright_settings.group_manufacturing_plan')

	is_manufacturing_plan = fields.Boolean("Production Plan", config_parameter='equip3_manuf_accessright_settings.is_manufacturing_plan', default=_default_is_manufacturing_plan)

	mo_force_done = fields.Boolean(string='Production Plan Allow Force Done', 
                                 related="company_id.mo_force_done", 
                                 readonly=False)
	manufacturing_plan_conf = fields.Boolean('Production Plan Approval Matrix', related='company_id.manufacturing_plan_conf',
											 readonly=False)
	manufacturing_order_conf = fields.Boolean('Production Order Approval Matrix', related='company_id.manufacturing_order_conf',
											  readonly=False)
	mrp_plan_partial_availability = fields.Boolean('MP Reserve Materials Partially',
												   related='company_id.mrp_plan_partial_availability',
												   readonly=False)
	mp_auto_reserve_availability_materials = fields.Boolean(string='Production Plan Auto Reserve Materials', readonly=False, 
												   related="company_id.mp_auto_reserve_availability_materials")
	mo_auto_reserve_availability_materials = fields.Boolean(string='Production Order Auto Reserve Materials', readonly=False, 
													related="company_id.mo_auto_reserve_availability_materials")

	production_record_conf = fields.Boolean('Production Record Approval Matrix', related='company_id.production_record_conf',
											readonly=False, store=True)
	mrp_production_partial_availability = fields.Boolean('Production Orders Reserve Materials Partially',
														 related='company_id.mrp_production_partial_availability',
														 readonly=False)
	mrp_force_done = fields.Boolean(string='Production Order Allow Force Done', 
                                 related="company_id.mrp_force_done", 
                                 readonly=False)
	manufacturing_mps = fields.Boolean(related='company_id.manufacturing_mps', readonly=False, string='New Master Production Schedule')
	manufacturing_period = fields.Selection(related='company_id.manufacturing_period', readonly=False)
	manufacturing_period_to_display = fields.Integer(related='company_id.manufacturing_period_to_display',
													 readonly=False)
	autogenerated_based_methods = fields.Selection([
		('autogenerated_based_product', 'Auto-generated based on product'),
		('autogenerated_based_lot', 'Auto-generated based on original lot/serial number'),
	], string='Cut Product Serializer', config_parameter='autogenerated.based.methods')

	send_wa_approval_notification_mrp = fields.Boolean(related='company_id.send_wa_approval_notification_mrp', readonly=False)
	send_wa_approval_notification_mp = fields.Boolean(related='company_id.send_wa_approval_notification_mp', readonly=False)
	send_wa_approval_notification_mpr = fields.Boolean(related='company_id.send_wa_approval_notification_mpr', readonly=False)

	# unsued fields, may delete someday
	allow_submit_purchase_request = fields.Boolean("Production Plan Allow Submit Purchase Request",default=False)
	allow_submit_material_request = fields.Boolean("Production Order Allow Submit Material Request", default=False)
	mrp_submit_purchase_request = fields.Boolean(string='Allow Submit Purchase Request', related="company_id.mrp_submit_purchase_request", readonly=False)
	mrp_submit_material_request = fields.Boolean(string='Allow Submit Materials Request', related="company_id.mrp_submit_material_request", readonly=False)

	@api.model
	def create(self, vals):
		is_manufacturing_plan = vals.get('is_manufacturing_plan', False)
		group_plan_id = self.env.ref('equip3_manuf_accessright_settings.group_manufacturing_plan')
		if is_manufacturing_plan:
			group_plan_id.users = [(4, self.env.user.id)]
		else:
			group_plan_id.users = [(3, self.env.user.id)]
		return super(ResConfigSettings, self).create(vals)

	@api.onchange('is_manufacturing_plan')
	def _onchange_is_manufacturing_plan(self):
		if not self.is_manufacturing_plan:
			self.manufacturing_plan_conf = False

	@api.onchange('manufacturing_plan_conf')
	def _onchange_manufacturing_plan_conf(self):
		if not self.manufacturing_plan_conf:
			self.send_wa_approval_notification_mp = False

	@api.onchange('manufacturing_order_conf')
	def _onchange_manufacturing_order_conf(self):
		if not self.manufacturing_order_conf:
			self.send_wa_approval_notification_mrp = False

	@api.onchange('production_record_conf')
	def _onchange_production_record_conf(self):
		if not self.production_record_conf:
			self.send_wa_approval_notification_mpr = False
